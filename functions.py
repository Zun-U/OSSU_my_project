# Functions
# ❐❐❐　「function」は「保存」と「再利用」　❐❐❐
# 同じような機能を一か所に集約すれば、そこを回収するだけで済む



# コードを覚えるフェーズ「ストアフェーズ」※コードの実行は "しない"
# ::::::::::::::::::::::::::::::::::::::::::::::::::::
# def
# 定義済みの関数を表すキーワード
def thing() : # 任意の名前を付ける。※ここでは「thing」

  # if statementの様にインデントでブロックを形成する
  print('Hello')
  print('Fun')
# インデントが解除されるとそこで関数の終わり

# ::::::::::::::::::::::::::::::::::::::::::::::::::::
# 重要なのはこの「def」ブロック部分は "コードを実行していない" ということ
# ❐ 何もしないが覚えている ❐
# つまり、「thing」が呼び出されたときに、実行させたいコードを覚えさせている、これが「保存」


# functionの呼び出し
thing()  # ここで初めてコードが実行される。

# 「thing()」はPythonの一部のように見えるが、def statementでPythonを拡張している


print('Zip')

# functionの『再利用』
# 一回定義したものを再度実行する
thing()


# 「print()」はPythonの組み込みfunction
# ()はfunctionの構文
# int()、type()、input()...


# ❐「def」はPython言語を拡張する新しい予約語を作成できる ❐
# ＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
# 「def」はキーワードを使用して定義し、それを呼び出す
# 実際にコードを実行するのではなく、コードを記憶するだけの定義フェーズがあり、
# 次に呼び出しフェーズがある
# 一度定義してから、一回以上呼び出す
# ＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊


# 「max」　Pythonの組み込み関数
# いくつかのパラメータをmax関数に渡すことができる
# 「割り当てステートメント」だから、まず右辺を評価する必要がある
big = max('Hello World')
# 戻り値は「r」
# そしてその戻り値「r」は、「big」に格納される

print(big)


tiny = min('Hello World')
print(tiny)